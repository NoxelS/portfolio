---
import * as Icon from '@astropub/icons';
import AboutCard from '../components/about-card.astro';

import Head from '../components/base/head.astro';
export interface Props {
    title?: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="">
    <Head />
    <body class="bg-white-100 text-black-80">
        <script is:inline src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <main class="p-10 md:px-4 col-span-3 xl:col-span-2">
            <div class="flex flex-row">
                <!-- Input sliders -->
                <div class="flex flex-col">
                    <div>Vstell</div>
                    <input type="range" min="-100" max="100" step="0.1" value="0"  class="slider" id="vstell_slider" />
                </div>
                
                <div class="flex flex-col ml-10">
                    <div>Punkte</div>
                    <div class="text-accent" id="punkte"></div>
                </div>
                
                <div class="flex flex-col ml-10">
                    <div class="italic text-sm text-black-60">Punkte sind deine mittlere Abweichung der letzten 50 Datapoints</div>
                </div>
            </div>
            <div class="flex row max-h-[600px]">
                <canvas id="myChart"></canvas>
            </div>
        </main>

        <!-- Scripts -->
        <script is:inline src="/utils.js"></script>

        <script is:inline>
            /** Global chart */
            const ctx = document.getElementById('myChart');
            const labels = [];
            const data = {
                labels: labels,
                datasets: [
                    {
                        label: 'Vist',
                        data: [],
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)'
                    },
                    {
                        label: 'Vsoll',
                        data: [],
                        fill: false,
                        borderColor: 'rgb(192, 80, 192)'
                    }
                ]
            };
            const config = {
                type: 'line',
                data: data,
                options: {
                    scaleShowLabels: false,
                    animation: {
                        duration: 0 // general animation time
                    },
                    hover: {
                        animationDuration: 0 // duration of animations when hovering an item
                    },
                    responsiveAnimationDuration: 0, // animation duration after a resize
                    scales: {
                        y: {
                            // defining min and max so hiding the dataset does not change scale range
                            min: 0,
                            max: 100,
                            beginAtZero: true
                        },
                        x: {
                            ticks: {
                                display: false
                            }
                        }
                    }
                }
            };
            const chart = new Chart(ctx, config);

            function addDatapoint(x, y, i = 0) {
                chart.data.labels.push(x);
                chart.data.datasets[i].data.push(y);

                // Only show last 50 datapoints
                if (chart.data.labels.length > 100) {
                    chart.data.labels.shift();
                    chart.data.datasets[i].data.shift();
                }

                // Update x axis
                // chart.options.scales.x.min = 0;
                // chart.options.scales.x.max = x;

                chart.update();
            }

            const t0 = Date.now();

            let Vist = 0;
            let Vsoll = 50;
            let Vstell = 10;

            let systemType = 0; // 0 = Wassersystem

            function updateValueBySliders() {
                const vstell_slider = document.getElementById('vstell_slider');
                const vstell = vstell_slider.value;
                Vstell = Number(vstell);
            }

            function updateSystem(t) {
                switch (systemType) {
                    case 0:
                        Vist = Math.max(0, Vist + 0.1 * Vstell);
                        Vist = Math.min(100, Vist)
                        break;
                    default:
                        break;
                }
            }

            let difs= [];

            setInterval(() => {
                const t = Date.now() - t0;
                updateValueBySliders();
                updateSystem(t);
                addDatapoint(t, Vist);
                addDatapoint(t, 50 + 25 * Math.sin((t / 1000)), 1);

                difs.push(Vsoll - Vist);

                // Calculate mean of last 50 values
                const mean = difs.slice(-50).reduce((a, b) => a + b, 0) / 50;
                document.getElementById('punkte').innerHTML = mean.toFixed(2);
            }, 250);
        </script>
    </body>
</html>
